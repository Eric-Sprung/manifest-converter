package ManifestConverter.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Pod;
  private ConceptPresentation props_PodMetadata;
  private ConceptPresentation props_PodSpec;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Pod:
        if (props_Pod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Pod");
          props_Pod = cpb.create();
        }
        return props_Pod;
      case LanguageConceptSwitch.PodMetadata:
        if (props_PodMetadata == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PodMetadata");
          props_PodMetadata = cpb.create();
        }
        return props_PodMetadata;
      case LanguageConceptSwitch.PodSpec:
        if (props_PodSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PodSpec");
          props_PodSpec = cpb.create();
        }
        return props_PodSpec;
    }
    return null;
  }
}
