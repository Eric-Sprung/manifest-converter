package Kustomize.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import Kustomize.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.charset.Charset;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Test:
        return new Test_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Test$Wd)) {
        String fname = getFileName_Test(root);
        String ext = getFileExtension_Test(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), Charset.forName(getEncoding_Test()), root);
        continue;
      }
    }
  }
  private static String getFileName_Test(SNode node) {
    return "test";
  }
  private static String getFileExtension_Test(SNode node) {
    return null;
  }
  private static String getEncoding_Test() {
    return "UTF-8";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Test$Wd = MetaAdapterFactory.getConcept(0xf78af01f47cf499bL, 0xac7bdd5feb577906L, 0x31016338a4c74569L, "Kustomize.structure.Test");
  }
}
