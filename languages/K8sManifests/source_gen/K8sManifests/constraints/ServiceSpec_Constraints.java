package K8sManifests.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ServiceSpec_Constraints extends BaseConstraintsDescriptor {
  public ServiceSpec_Constraints() {
    super(CONCEPTS.ServiceSpec$jl);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return SNodeOperations.isInstanceOf(parentNode, CONCEPTS.Service$mb);
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:c651de1c-ba05-4997-ab09-0e0488e7ba8f(K8sManifests.constraints)", "958717984449329696");

  private static final class CONCEPTS {
    /*package*/ static final SConcept ServiceSpec$jl = MetaAdapterFactory.getConcept(0xdd310849d074035L, 0x939dcb69bd123423L, 0xd4e0ced66e17a1aL, "K8sManifests.structure.ServiceSpec");
    /*package*/ static final SConcept Service$mb = MetaAdapterFactory.getConcept(0xdd310849d074035L, 0x939dcb69bd123423L, 0xd4e0ced66dd0a17L, "K8sManifests.structure.Service");
  }
}
