package K8sManifests.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;

public class Service_Constraints extends BaseConstraintsDescriptor {
  public Service_Constraints() {
    super(CONCEPTS.Service$mb);
  }

  public static class Kind_Property extends BasePropertyConstraintsDescriptor {
    public Kind_Property(ConstraintsDescriptor container) {
      super(PROPS.kind$FMse, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castEnummember(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:c651de1c-ba05-4997-ab09-0e0488e7ba8f(K8sManifests.constraints)", "958717984449321541"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, SEnumerationLiteral propertyValue) {
      return SPropertyOperations.getEnum(node, PROPS.kind$FMse) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xdd310849d074035L, 0x939dcb69bd123423L, 0x47d62de234335623L, "K8sManifests.structure.ManifestKinds"), 0xd4e0ced66dd2430L, "Service");
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.kind$FMse, new Kind_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Service$mb = MetaAdapterFactory.getConcept(0xdd310849d074035L, 0x939dcb69bd123423L, 0xd4e0ced66dd0a17L, "K8sManifests.structure.Service");
  }

  private static final class PROPS {
    /*package*/ static final SProperty kind$FMse = MetaAdapterFactory.getProperty(0xdd310849d074035L, 0x939dcb69bd123423L, 0x47d62de234364c8aL, 0x47d62de234364c8dL, "kind");
  }
}
